{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude97 High-Fidelity Porsche Rendering with Blender","text":"<p>Welcome to our internal documentation hub for rendering Porsche vehicles using Blender.</p> <p>This site covers our workflows, tools, and best practices for creating photorealistic visualizations of Porsche models \u2014 from material configuration and headless rendering to automation and asset management.</p> <p>Explore the sections to get started:</p> <ul> <li> <p>Table of Contents</p> </li> <li> <p>\ud83c\udfa8 Material combinations and customization</p> </li> <li>\ud83e\udde0 Scripted workflows and automation</li> <li>\ud83d\udcbb Headless rendering and performance tuning</li> <li>\ud83d\uddc2\ufe0f File structure and asset organization</li> </ul>"},{"location":"W%26S%20-%20Blender%20scripting%20documentation/","title":"Home","text":"<p>This is a documentation for w&amp;s about Blender scripting</p>"},{"location":"W%26S%20-%20Blender%20scripting%20documentation/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":""},{"location":"W%26S%20-%20Blender%20scripting%20documentation/#blender-scripting","title":"\ud83e\uddea Blender Scripting","text":"<ul> <li>Combinations Rendering</li> <li>Headless Rendering</li> <li>Script Loading</li> <li>Using Command Line Arguments</li> <li>Render Settings</li> <li>File Structure</li> <li>Memory Probing</li> </ul>"},{"location":"Blender%20Scripting/Blender%20to%20Script/","title":"Blender to Script","text":"<p>How Blender File Settings are exposed to the script</p>"},{"location":"Blender%20Scripting/Blender%20to%20Script/#questions","title":"Questions:","text":""},{"location":"Blender%20Scripting/Blender%20to%20Script/#geometry-nodes","title":"Geometry Nodes","text":"<p>Objects are Stored in Geo Nodes - How does a Menu switch work     - Where are input Objects Stored     - Where is the output Object Displayed</p>"},{"location":"Blender%20Scripting/Blender%20to%20Script/#materials","title":"Materials","text":""},{"location":"Blender%20Scripting/Blender%20to%20Script/#compositing","title":"Compositing","text":"<p>Does each Layer have its own Composition layer? When do i need to Mask a Material with \"Cryptomatte\"?</p>"},{"location":"Blender%20Scripting/Blender%20to%20Script/#layers","title":"Layers","text":""},{"location":"Blender%20Scripting/Blender%20to%20Script/#scripting","title":"Scripting","text":""},{"location":"Blender%20Scripting/Combinations%20Rendering/","title":"Combinations Rendering","text":""},{"location":"Blender%20Scripting/Combinations%20Rendering/#rendering-combinations-plain-markdown","title":"\ud83e\uddea Rendering Combinations (Plain Markdown)","text":"<p>The task is to render cars with different materials for each part and their corresponding combinations.</p> <p>Even for just 3 different parts with different color options, this leads to:</p> <p>p^(c\u2081 \u00d7 c\u2082 \u00d7 c\u2083) possible combinations, where:</p> <ul> <li> <p>p is the number of different parts</p> </li> <li> <p>c\u2099 is the number of materials that part can have</p> </li> </ul> <p>Example: For Car Body, Rims, and Lights, each with 3 different materials, this already leads to trillions of combinations:</p> <p>3^(3 \u00d7 3 \u00d7 3) = 3^27 = 7,625,597,484,987</p>"},{"location":"Blender%20Scripting/Combinations%20Rendering/#solving-the-problem","title":"Solving the Problem","text":"<p>Because of this we are not rendering each combination individually we only render each single part with each combination and combining them in post.   This way we still render the same amount of pixels but we can remove redundant images if they do not affect each other. For example: if the rims change color the headlights don't need to rendered again.  Now we can create dependency tables that show which part can affect the rendering of another part and which part can be rendered independently. </p>"},{"location":"Blender%20Scripting/Combinations%20Rendering/#dependency-tables","title":"Dependency Tables","text":"<p>Each Part can be dependent on multiple other parts Each Part can be rendered by multiple cameras Each Camera can be rendered with multiple light Setups</p>"},{"location":"Blender%20Scripting/Environment%20Rendering/","title":"Environment Rendering","text":""},{"location":"Blender%20Scripting/Environment%20Rendering/#requirements","title":"Requirements","text":"<ul> <li>Background should contain detailed 3D scene</li> <li>Background should be interchangeable</li> <li>Sweet Spot Cameras only</li> <li>Personalised Car should be inside the Environment</li> <li>Lighting should be realistic</li> </ul>"},{"location":"Blender%20Scripting/Environment%20Rendering/#implementation","title":"Implementation","text":""},{"location":"Blender%20Scripting/Environment%20Rendering/#considerations","title":"Considerations","text":"<p>Main Problem is that the environments are not 360\u00b0 and the pictures should be taken from different sweet spot angles.  - Cant be added to existing background Layers because existing cameras would show pictures where the environment ends - needs different Cameras - view with existing cameras cant be used? </p>"},{"location":"Blender%20Scripting/Environment%20Rendering/#blender-file","title":"Blender File","text":"<ul> <li>Link environemts into 964_ext.blend file</li> <li>Geometry node switch for different environments </li> <li>Compositor for Environment on new Scene layer </li> <li>5 Cameras for different sweet spot photos</li> <li>setup car rotation based on different sweet spot cameras <ul> <li><code>[Cam1: 0\u00b0, Cam2: 45\u00b0...]</code></li> </ul> </li> </ul>"},{"location":"Blender%20Scripting/Environment%20Rendering/#python-script","title":"Python Script","text":"<ul> <li>Code create new CFS for environment Geometry node switch</li> <li>Create render environment sister function (called out of main render function)</li> <li>For each part configuration renders for usual background and then for environment<ul> <li>Environment has fewer Cameras</li> <li>Car rotates based on Camera to always show sweet spot environment</li> </ul> </li> </ul> <p>Mocked Code</p> <pre><code># Environment Script part\ndef EnvironmentBG():\n\nconfigurations = [ # Parts that all influence the Layer (Background in this case)\nCFS[\"Bodykits\"],\nCFS[\"FelgenFull\"],\nCFS[\"Distanzscheiben\"],\nCFS[\"Distanzscheiben\"],\nCFS[\"BGColorComp\"],\n]\n\n\nslot_mapping = { # Path name fill ins\n\"bodykit\": 0, # Bodykits\n...\n}\n\n\nrender_scene_with_config( # usual Render\n\"Hintergrund\",\ncameras[\"CamsBG\"],\n\"Hintergrund\",\nconfigurations,\nslot_mapping,\n...\n)\n\n# Switch \n# Environments on \n# Backgrounds  off\n\nrender_scene_with_environment( # render for environment\n\"Environment\",\ncameras[\"CamsEnv\"], #has camera car rotation switch\n\"Environment\",\nconfigurations,\nslot_mapping,\n...\n)\n</code></pre>"},{"location":"Blender%20Scripting/File%20Structure/","title":"File Structure","text":"<pre><code>#Imports\nimport bpy\nimport os\n...\n\n#File Specific Definition\nOUTPUT_TEMPLATE \npath_pattern = [\n\"IC\",\n\"NF\",\n]\nCAMERAS_TO_RENDER = [\n\"C1\",\n\"C2\",\n]\nLOOPS_TO_RENDER = [\n\"E0\",\n\"E1\",\n]\ncameras\nlight_setups\nglass_setups #Optional\n</code></pre>"},{"location":"Blender%20Scripting/Headless%20Rendering/","title":"Headless Rendering","text":""},{"location":"Blender%20Scripting/Headless%20Rendering/#how-to-render-images-using-headless-blender","title":"How to render images using Headless Blender","text":"<p>This allows us to use Blender from the command-line. Headless means no blender ui is opened and all commands to the blend file have to be made through command-line commands which are explained here</p>"},{"location":"Blender%20Scripting/Headless%20Rendering/#need","title":"Need:","text":"<p>Comand Line Blender Launch: https://docs.blender.org/manual/en/latest/advanced/command_line/launch/index.html#command-line-launch-index</p>"},{"location":"Blender%20Scripting/Headless%20Rendering/#blender-terminal-rendering-command","title":"Blender Terminal Rendering Command:","text":"<p>https://docs.blender.org/manual/en/latest/advanced/command_line/render.html</p> <p>min usable:</p> <pre><code>blender -b file.blend -f 10\n</code></pre> <ul> <li><code>blender</code> <ul> <li>blender headless launch command</li> </ul> </li> <li><code>-b</code> <ul> <li>render in background</li> </ul> </li> <li><code>file.blend</code><ul> <li>path to file that renders</li> </ul> </li> <li><code>-f 10</code><ul> <li>render the 10th frame (required!)</li> </ul> </li> </ul> <p>render to specific output path:</p> <pre><code>blender -b Documents/Blender/headless_test/cube1.blend -o Documents/Blender/Renders/frame_##### -E CYCLES -f 10\n</code></pre> <ul> <li><code>-o</code> <ul> <li>output path</li> </ul> </li> <li><code>frame_#####</code> <ul> <li>enumerates each rendered frame counting up</li> </ul> </li> <li><code>-E CYCLES</code><ul> <li>Sets the render engine to cycles. Default is what the file is using</li> </ul> </li> </ul> <p>Headless Script Loading</p> <pre><code>blender -b \"$BLEND_FILE\" -P \"$SCRIPT_FILE\"\n</code></pre>"},{"location":"Blender%20Scripting/Headless%20Rendering/#headless-example","title":"Headless Example:","text":"<p>Elferplatz script Headless rendering Usage:</p> <p>Basic call: Renders in full Size</p> <pre><code>blender -b &lt;path-to-.blend&gt; -P &lt;path-to-script&gt; \n</code></pre> <p>Options: Options are added at the end of the Terminal call - <code>test</code> no pictures are rendered only file paths are logged and amount of files are counted - <code>test-rend</code> renders pictures in human viewable format - <code>min</code> only first picture for every camera is rendered - <code>pre</code> renders are in low resolution</p> <p>Example calls 964_ext: Renders in TEST_MODE</p> <pre><code>blender -b Documents/mass-rend-test/964_ext_206.blend -P Documents/w-s/ansible-server-management/roles/blender_scripting/files/964_ext.py test\n</code></pre> <p>964_int: Renders in MINIMUM_MODE + PREVIEW_MODE</p> <pre><code>blender -b Documents/mass-rend-test/964_int_173.blend -P Documents/w-s/ansible-server-management/roles/blender_scripting/files/964_int.py min test\n</code></pre> <p>g_ext_early: Renders in MINIMUM_MODE + PREVIEW_MODE</p> <pre><code>blender -b Documents/mass-rend-test/g_ext_31.blend -P Documents/w-s/ansible-server-management/roles/blender_scripting/files/g_ext_early.py test min\n</code></pre>"},{"location":"Blender%20Scripting/Memory%20Probing/","title":"Memory Probing","text":"<p>This program is not memory safe for different reasons.</p> <ul> <li>Blender files are loaded and are massive rendering these requires at least 32gb ram or 8gbvram</li> <li>Blender Files are not cleane up properly on runtime</li> <li>Python generates too many combinations</li> </ul>"},{"location":"Blender%20Scripting/Memory%20Probing/#blender-files","title":"Blender Files","text":"<p>Memory usage stays consistent based on different Layers. Each Layer can change the vertex structure which leads to more memory usage</p> <pre><code>Images: 112  \nMaterials: 152  \nMeshes: 581  \nObjects: 770  \nNode Groups: 112\n</code></pre>"},{"location":"Blender%20Scripting/Memory%20Probing/#blender-cleanup","title":"Blender Cleanup","text":"<p>adding cleanup like cleaning up freed objects doesnt change memory usage</p>"},{"location":"Blender%20Scripting/Memory%20Probing/#python-memory-leaks","title":"Python Memory Leaks","text":"<p>Python Memory shows to be consistent <code>Total Python objects: 46296</code></p>"},{"location":"Blender%20Scripting/Memory%20Probing/#observations","title":"Observations","text":"<p>Running in lowpower mode on mac + test mode runs without crashing</p>"},{"location":"Blender%20Scripting/Render%20Settings/","title":"Render Settings","text":"<pre><code>RENDER_RESOLUTION_X = 2560\nRENDER_RESOLUTION_Y = 1440\nRENDER_RESOLUTION_PERCENTAGE = 100\n\nCYLCES_ADAPTIVE_THRESHOLD = 0.025\nCYLCES_SAMPLES = 512\n\n# PreRender Settings\nPRE_RENDER_RENDER_RESOLTION_PERCENTAGE = 50\nPRE_RENDER_CYLCES_ADAPTIVE_THRESHOLD = 0.5\nPRE_RENDER_CYLCES_SAMPLES = 1\n\n#If True, the script will only output the paths to the images and count the renderings\n\n# If False, the script will render the images\nTEST_MODE = (\nFalse # Nur die Pfade zu den Bildern ausgeben und die Renderings z\u00e4hlen\n)\nRENDER_MINIMUM = True\nMINIMUM_COUNT = 1 # Minimale Anzahl der Renderings\nPRE_RENDER = True # Bilder in niedriger Qualit\u00e4t vorrendern\nVERSION = \"3\" # Version der Blocker-Datei\nBASE_PATH = (\n\"./renderings/output/elferplatz/\"\nif platform.system() == \"Darwin\"\nelse \"/root/renderings/output/elferplatz/\"\n)\n\nOUTPUT_TEMPLATE = \"./B01/E_Ext/E{999}/M{0}-{1}-{2}/P{3}/FL{4}/V{5}/R{6}/F{7}-{8}-{9}/BS{10}-{11}/SW{12}-{13}/RL{14}/SP{15}/BG{16}/SZ{17}/FW{18}/DS{19}/KZ{20}/AS{21}\"\n</code></pre>"},{"location":"Blender%20Scripting/Script%20loading/","title":"Script Loading","text":"<p>Blender allows us to use Blender scripts within the .blend file. These scripts are run in an internal Python component that has no access to you file system. This means you cant import scripts within scripts normally!</p>"},{"location":"Blender%20Scripting/Script%20loading/#loading-scripts-headless","title":"Loading scripts headless","text":"<p>In an example i have a scripts folder for a cube.blend file that wants to import scripts</p> <pre><code>your_project/\n\u251c\u2500\u2500 cube.blend\n\u2514\u2500\u2500 scripts/\n    \u251c\u2500\u2500 mainscript.py\n    \u2514\u2500\u2500 importscript.py\n</code></pre> <p>Importing headless works perfectly using</p> <pre><code>blender -b\u00a0 cube.blend -P scripts/mainscript.py\n</code></pre> <p>mainscript.py imports importscript.py for helperfunctions.</p>"},{"location":"Blender%20Scripting/Script%20loading/#the-problem","title":"The Problem","text":"<p>Opening mainscript.py in the Blender scripting editor and running it throws an error because Python cant find the file. To solve this a switch has to be added to the code that recognises both methods of launching the script.</p>"},{"location":"Blender%20Scripting/Script%20loading/#multiplatform-script-loading-solution","title":"Multiplatform script loading solution","text":"<pre><code># Try to detect the directory this script is in\nif \"__file__\" in globals() and os.path.isfile(__file__):\n    # Running headless\n    script_dir = os.path.dirname(__file__)\nelse:\n    # Running from Blender's scripting tab\n    script_dir = bpy.path.abspath(\"//scripts\")\nif script_dir not in sys.path:\n    sys.path.append(script_dir)\n\nprint(\"Script dir:\", script_dir)\n</code></pre>"},{"location":"Blender%20Scripting/Using%20command%20line%20arguments/","title":"Using Command Line Arguments","text":""},{"location":"Blender%20Scripting/Using%20command%20line%20arguments/#how-blender-scripting-system-arguments-work","title":"How Blender Scripting System Arguments work","text":"<p>sys args contain all additional arguments when a program is called from the command line</p> <pre><code>import sys\nargv = sys.argv\nargv = argv[argv.index(\"--\") + 1:]  # get all args after \"--\"\n\nprint(argv)  # --&gt; ['example', 'args', '123']\n</code></pre> <pre><code>blender --background cube2.blend --python mainscript.py -- example args 123\n</code></pre>"},{"location":"Blender%20Scripting/Using%20command%20line%20arguments/#script-arguments","title":"Script arguments","text":"<p>In this script the Arguments are called via command line are explained here.</p> Argument Explanation <code>test</code> no pictures are rendered only file paths are logged <code>minimum</code> only first picture for every camera is rendered <code>pre</code> renders are in low resolution <code>test-rend</code> renders pictures in human readable file paths- <code>script-name</code>  - <code>layer-1</code>  - <code>layer-2</code>  - ..."},{"location":"Blender%20Scripting/Using%20command%20line%20arguments/#script-examples","title":"Script Examples","text":"<p>964_ext called from windows command line</p> <pre><code>blender -b 964_ext_238.blend -P ../../../../../../../../Desktop/EP_Repo/ansible-server-management/roles/blender_scripting/files/964_ext.py pre min test-rend\n</code></pre> <p>964_ext: Renders in TEST_MODE: only file paths and file count is logged</p> <pre><code>blender -b Documents/mass-rend-test/964_ext_206.blend -P Documents/w-s/ansible-server-management/roles/blender_scripting/files/964_ext.py test\n</code></pre> <p>964_int: Renders in MINIMUM_MODE + PREVIEW_MODE + TEST_REND_MODE: minimum amount of preview pictures are rendered in human readable form</p> <pre><code>blender -b Documents/mass-rend-test/964_int_173.blend -P Documents/w-s/ansible-server-management/roles/blender_scripting/files/964_int.py min pre test-rend\n</code></pre> <p>g_ext_early: Renders in MINIMUM_MODE + TEST_REND_MODE: minimum amount of fullhd pictures are rendered in encapsulated folder style</p> <pre><code>blender -b Documents/mass-rend-test/g_ext_31.blend -P Documents/w-s/ansible-server-management/roles/blender_scripting/files/g_ext_early.py test min\n</code></pre>"},{"location":"Plannings/Elferplatz%20-%20Ende%3F/","title":"Elferplatz   Ende?","text":"<p>Die Software Elferplatz ist ein Personalisierter Autogenerator f\u00fcr reiche Porscheliebhaber. Das Projekt ist 6 Monate nach der Deadline immer noch nicht fertig und damit eine Finanzielle Vollkatastrophe</p>"},{"location":"Plannings/Elferplatz%20-%20Ende%3F/#was-nun","title":"Was nun","text":""},{"location":"Plannings/Elferplatz%20-%20Ende%3F/#weitermachen","title":"Weitermachen","text":"<p>Sunk kost fallacy aber das Projekt soll noch irgendwie fertig werden. - Weitere Kosten entstehen - Elferplatz fertig</p>"},{"location":"Plannings/Elferplatz%20-%20Ende%3F/#probleme","title":"Probleme","text":"<p>Aktuelle Probleme aus der Sicht des 3D-Teams. - Keine M\u00f6glichkeit \u00c4nderungen direkt zu testen     - selbst wenn 100.000+ Bilder nach Fehlern abzusuchen ist unrealistisch - Zu kurze Deadlines</p>"},{"location":"Plannings/Elferplatz%20-%20Ende%3F/#wie-weitermachen","title":"Wie weitermachen","text":"<ul> <li>Fehler akzeptieren und nach auftreten beheben</li> <li>Bilder automatisch nach Skript\u00e4nderung generieren \u00fcber CI/CD Pipeline</li> <li>L\u00e4nger abwarten bevor Features gezeigt werden vor allem wenn sie nicht Fertig sind.</li> <li>Preview so weit runter brechen damit  man nur eine Option aller configs rendert damit wir das lokal machen k\u00f6nnen</li> </ul>"},{"location":"Plannings/Elferplatz%20-%20Ende%3F/#abbrechen","title":"Abbrechen","text":"<p>Den Finanziellen schaden Akzeptieren und das Projekt abbrechen. Ist das m\u00f6glich?  - Keine weiteren Finanziellen Kosten - Gibt es Projekte f\u00fcr das 3D-Team?</p>"},{"location":"Plannings/Elferplatz%20-%20Ende%3F/#gesprach-mit-christian","title":"Gespr\u00e4ch mit Christian","text":"<ul> <li>Frontend Pfad konfiguriert die Bildkombis. Kann man \u00fcber den Pfad manipulieren.</li> <li>Optix- Metal- Cuda switch</li> <li>Path switch</li> <li>Min-Pre-Rendering f\u00fcr Lokal testing</li> <li>merge main into feature branch</li> </ul>"},{"location":"Plannings/Kennzeichen-Konfigurator/","title":"Optionen zum Rendern von individuellen Kennzeichen im Elferplatz-Konfigurator","text":""},{"location":"Plannings/Kennzeichen-Konfigurator/#kennzeichen-mit-font-hacken","title":"Kennzeichen mit Font \"Hacken\"","text":"<p>Die Kennzeichenschrift wird als Font \u00fcber das Kennzeichen gelegt. Das Kennzeichen soll als wei\u00dfes Blank gerendert werden.</p> <p>Pro - Schnell umsetzbar - Kein zus\u00e4tzlicher Rendering-Aufwand  </p> <p>Contra - Kennzeichen hat keine Dreidimensionalit\u00e4t - Frontend muss die Schrift \u00fcber jedes Bild legen  </p>"},{"location":"Plannings/Kennzeichen-Konfigurator/#jede-ziffer-rendern-und-im-frontend-zusammensetzen","title":"Jede Ziffer rendern und im Frontend zusammensetzen","text":"<p>Alle Stellen des Kennzeichens werden einzeln gerendert und im Frontend anhand vieler kleiner Bilder zusammengesetzt.</p> <p>Pro - Das Kennzeichen ist dreidimensional  </p> <p>Contra - Reflektionen der Karosserie im Kennzeichen (und umgekehrt) fehlen - Frontend muss die einzelnen Ziffern f\u00fcr jedes Bild zusammensetzen  </p>"},{"location":"Plannings/Kennzeichen-Konfigurator/#kennzeichen-presets-only","title":"Kennzeichen-Presets only","text":"<p>Es gibt drei vorgefertigte Kennzeichen, aus denen ausgew\u00e4hlt werden kann.</p> <p>Pro - Kennzeichen ist realgetreu  </p> <p>Contra - Keine Individualisierbarkeit  </p>"},{"location":"Plannings/Kennzeichen-Konfigurator/#kennzeichen-konfigurator-mit-geometry-nodes-und-nur-auf-anfrage-rendern","title":"Kennzeichen-Konfigurator mit Geometry Nodes und nur auf Anfrage rendern","text":"<p>Ein Blender-Konfigurator wird gebaut, mit dem Kennzeichen generiert werden k\u00f6nnen. Bei spezieller Kennzeichenanfrage kann das Auto mit genau diesem Kennzeichen vom Server gerendert werden.</p> <p>Pro - Kennzeichen ist realgetreu  </p> <p>Contra - Viel zu viele M\u00f6glichkeiten, um die Kennzeichen vorab zu rendern:   - Buchstaben, Spacing, Kennzeichengr\u00f6\u00dfe, Reflektionen der Karosserie \u2192 mindestens $e \\cdot 10^{30}$ Kombinationen - Rendering dauert ca. 30 Sekunden \u2013 zu lange f\u00fcr das Anzeigen im Frontend  </p>"},{"location":"Plannings/Kennzeichen-Konfigurator/#kennzeichen-handisch-vom-render-team-erstellen-lassen","title":"Kennzeichen h\u00e4ndisch vom Render-Team erstellen lassen","text":"<p>Nur auf Anfrage wird das Auto mit einem speziellen Kennzeichen vom 3D-Team gerendert \u2013 wie es z.\u202fB. Porsche selbst macht.</p> <p>Pro - Kein Kennzeichengenerator n\u00f6tig - Realgetreu  </p> <p>Contra - Kein Kennzeichengenerator verf\u00fcgbar  </p>"}]}